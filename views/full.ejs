<!DOCTYPE html>
<html>
<head>
<title>Testing with nodejs and knockout</title>

<script type='text/javascript' src='/javascripts/jquery-1.9.0.min.js'></script>
<script type='text/javascript' src='/javascripts/knockout-2.2.1.js'></script>
<script type='text/javascript' src="/javascripts/knockout.validation.min.js"></script>
<!-- <script type="text/javascript" src ="/javascripts/knockout.validation/es-ES.js"> </script> -->
<!-- <script type='text/javascript' src="/bootstrap/js/bootstrap.min.js"></script> -->

<link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css" />
<script type="text/javascript" src="/javascripts/pnotify/jquery.pnotify.min.js"></script>
<link href="/javascripts/pnotify/jquery.pnotify.default.css" media="all" rel="stylesheet" type="text/css" />
<!-- Include this file if you are using Pines Icons. -->
<link href="/javascripts/pnotify/jquery.pnotify.default.icons.css" media="all" rel="stylesheet" type="text/css" />



<link rel="stylesheet" href="/stylesheets/knockout.css" />
<script src="/socket.io/socket.io.js"></script>

<script type='text/javascript'>
/*<![CDATA[*/

/* --------------------  WARNING  ------------------ */
/* MASTER FILE IS FULL.JS, AVOID EDITING OTHER FILES */
/* ------------------------------------------------- */

/* VARIABLES/CONSTANTS */
var defaultEmail 								= 'get@one.com';
var defaultTwitter 							= '@riesco';
var defaultName 								= 'Rambo';
var defaultMeetupName 					= 'Dynlang';
defaultEmail = defaultTwitter 	= defaultName = defaultMeetupName = '';

var model;
var socket;

var reloadIntervalInSeconds 		= 5; // you may wan't to reduce this value for production environment
var maxParticipants 						= 30;
var maxInterests 								= 4;

/**
* this will reload the content when the ws receives a needsToBeUpdated event
*/
function loadSocket() {
  socket.on('needsToBeUpdated', function (data) {
    console.log('the content will be reloaded!')
    model.load();
  });
}


/* MODELS */
// interest model
var Interest = function(input) {
	var self = this;
	if (typeof(input) === 'undefined') { input = { name: 'javascript' }; }	
	self.name 										= ko.observable(input.name);
}
// person model
var Person = function(input) {
	var self = this;
	if (typeof(input) === 'undefined') {
		input = { name: defaultName, twitter: defaultTwitter, email: defaultEmail }; 
	}	
	self.name 										= ko.observable(input.name).extend({ 
		required: true
		, minLength: 3
	});
	self.twitter 									= ko.observable(input.twitter).extend({ 
		required: true
		, minLength: 5
		, pattern : {
			message: "Twitter accounts must start with an @"
			, params: /^@{1}.+/
		}
	});
	self.email 										= ko.observable(input.email).extend({ 
		required: true
		, minLength: 5
		, pattern : {
			message: "Please enter a valid e-mail address"
			, params: /^.+@{1}.+/
		}
	});
	self.interests 								= ko.observableArray([]);
	for (var i in input.interests) { self.interests.push( new Interest(input.interests[i]) ) }
	self.addInterest 							= function() { self.interests.push( new Interest() ) }
	self.removeInterest 					= function(item) { self.interests.remove(item) }

	self.lessThanLimit 						= ko.computed(function () {
		return (self.interests().length < maxInterests);
	}, self)
}
// meetup model
var Meetup = function(input) {
	var self = this;
	if (typeof(input) === 'undefined') {
		input = { name: defaultMeetupName, date: Date.now }; 
	}
	self.name 										= ko.observable(input.name).extend({ 
		required: true
		, minLength: 3
	});
	self.date 										= ko.observable(input.date);
	self.people 									= ko.observableArray([]);
	for (var i in input.people) { self.people.push( new Person(input.people[i]) ) }
	self.addPerson 								= function() { self.people.push( new Person() ) }
	self.removePerson 						= function(item) { self.people.remove(item) }

	self.lessThanLimit 						= ko.computed(function () {
		return (self.people().length < maxParticipants);
	}, self)

	self.formattedDate 						= ko.computed(function() {
		var date =  new Date(self.date());
		// return date.toDateString('yyyy-MM-dd'); // @todo: fix this
		return date.toDateString();
	}, self)
}

var ViewModel = function() {
	var self = this;
	// meetups
	self.meetups 									= ko.observableArray([]);
	// holds the new meetup
	self.newMeetup 								= ko.observableArray( [new Meetup()] );

	self.myErrors 								= ko.observableArray ([]);

	/* load entries from db */
	/* maps the received data into our objects and then assigns the result to the model */
	self.load = function() {
		$.getJSON('/load', function(data) {
			var mappedMeetups = $.map(data, function(meetup) { return new Meetup(meetup) });
			self.meetups( mappedMeetups );
		}); 
	}

	/* delete all entries from db, then update the interface */
	self.deleteAll = function() {
		$.getJSON("/deleteAll", function(data) {
			socket.send('saved!');
			self.load();
			show_stack_bar_top('success', 'All entries deleted', '', 1);
		}); 
	}

	/* save to db, remember to use ko.toJSON */
	self.save = function() {

		var result 									= ko.validation.group(self, {deep: true});
		self.myErrors(result() );
		// model.errors.showAllMessages();

		if (self.isValid()) {
			$.ajax({
				type: 'POST',
				url: '/save',
				data: ko.toJSON( self.newMeetup() ),
				success: saveHandler,
				error: errorHandler,
				dataType: 'json',
				contentType: 'application/json' // don't forget this!!!!
			});		
		} else {
			// handle validation errors
			
			// find the first element with validationElement class and set focus on it
			$('input.validationElement:first').focus();

			show_stack_bar_top('error', 'Something went wrong', 'Please fix the errors', 3);

		}

	}

	/* handle */
	function saveHandler(msg) { 
		if (msg.result) {
			self.load();
			show_stack_bar_top('success', 'Meetup created', '', 1);
			socket.send('saved!');
		} else {
			console.log('ERROR: ' + msg.message);
			var errorMessages = [];
			if (typeof(msg.error) !== 'undefined') {
				for (error in msg.error) {
					errorMessage = { object: error, element: msg.error[error].path, error: msg.error[error].type };
					console.log(errorMessage);
					errorMessages.push(errorMessage);
				}
			} else { }
			console.log('Errors summary: ');
			console.log(errorMessages);	
		}
	}

	/* handle */
	function errorHandler(msg) {
		console.log('ERROR: ' + msg);
	}

	// configuration (see https://github.com/ericmbarnard/Knockout-Validation/wiki/Configuration)
	ko.validation.init(
		{
			errorMessageClass 			: 'validationMessage'
			, errorElementClass 		: 'validationElement'
			, errorClass 				: null
			, insertMessages 			: false // enable this to insert text messages within the form 
			, decorateElement 			: true
			, parseInputAttributes 		: false
			, messagesOnModified 		: true
			, messageTemplate 			: null
			// , grouping 					: { deep: true, observable: true }
		}
	);
}


$(document).ready(function () {

	console.log(location);


	// socket = io.connect('http://' + host);
	socket = io.connect('http://' + location.hostname + ':' + location.port);
	// socket = io.connect('http://' + location.hostname + ':3000');

	// new instance (only necessary to invoke the load method afterwards)
	model = new ViewModel();
	// apply bindings
	ko.applyBindings(model); // This makes Knockout get to work
	// load and set an interterval to re-load
	model.load();

	// reload disabled -> replaced by websockets
	// setInterval(model.load, 1000 * reloadIntervalInSeconds);
	loadSocket();

	// this custom validation rule was not working properly
	// custom validation rules
	// ko.validation.rules['myRule'] = {

	// 	validator: function (val, otherVal) {
	// 			if (val == otherVal) {
	// 				return true;
	// 			} else {
	// 				return false;
	// 			}

	// 		console.log(otherVal);
	// 	},
	// 	message: '{0} field is invalid'// + otherVal.name2
	// };
	// ko.validation.registerExtenders();

});



// notification center

// options
var stack_topleft = {"dir1": "down", "dir2": "right", "push": "top"};
var stack_bottomleft = {"dir1": "right", "dir2": "up", "push": "top"};
var stack_custom = {"dir1": "right", "dir2": "down"};
var stack_custom2 = {"dir1": "left", "dir2": "up", "push": "top"};
var stack_bar_top = {"dir1": "down", "dir2": "right", "push": "top", "spacing1": 0, "spacing2": 0};
// var stack_bar_top2 = {"dir1": "down", "dir2": "right", "push": "bottom", "spacing1": 0, "spacing2": 0}; // no funciona bien al desaparecer
var stack_bar_bottom = {"dir1": "up", "dir2": "right", "spacing1": 0, "spacing2": 0};
var stack_bottomright = {"dir1": "up", "dir2": "left", "firstpos1": 25, "firstpos2": 25};

// 
function show_stack_bar_top(type, title, text) {
	var options = {
		title: "Over Here"
		, text: "Check me out. I'm in a different stack."
		, addclass: "stack-bar-top"
		, cornerclass: ""
		, width: "100%"
		, opacity: .98
		, nonblock: true
		, nonblock_opacity: .2
		, stack: stack_bar_top
		, text: 	text
		, title: 	title
		, type: 	type
		// , icon: 'icon-envelope'
		, delay: 	4000
		, history: false
	};

	if (type == 'success') {
		options.icon = 'icon-ok'
	} else if (type == 'info') {
		options.icon = 'icon-info-sign'
	} else if (type == 'notice') {
		options.icon = 'icon-warning-sign'
	} else if (type == 'error') {
		options.icon = 'icon-warning-sign'
	}

	$.pnotify(options);
}

// show_stack_bar_top('success', 'Done', '');
// show_stack_bar_top('error', 'Something went wrong', 'Please fix');
// show_stack_bar_top('info', 'Info title', 'some info text');
// show_stack_bar_top('notice', 'Be careful', 'some text');


/*]]>*/
</script>
</head>
<body>


<form data-bind="submit: $root.save" class="">
	<div class="dataBlock">
		<div data-bind="foreach: newMeetup" class="form-inline">
			<h2>Meetup Whitelist</h2>
			<input type="text" data-bind="value: name" class="" placeholder="Meetup name">
			<input type="button" data-bind="click: addPerson, enable: lessThanLimit" value="+participant" class="btn btn-success">
			
			<div data-bind="foreach: people">
				<div class="peopleContainer">
					<input type="text" data-bind="value: name" placeholder="name">
					<input type="text" data-bind="value: twitter" placeholder="@username">
					<div class="input-append">
						<input type="text" data-bind="value: email" placeholder="your@email.com"><input type="button" data-bind="click: $parent.removePerson" value="x" class="btn btn-danger">
					</div>

					<input type="button" data-bind="click: addInterest, enable: lessThanLimit" value="+interest" class="btn btn-success">
					<div data-bind="foreach: interests">
						<div class="input-append interestsContainer">
							<input type="text" data-bind="value: name" class="">
							<input type="button" data-bind="click: $parent.removeInterest" value="x" class="btn btn-danger">
						</div>
					</div>	
				</div>
			</div>

			<div class="buttonsContainer" style="">
				<input type="submit" data-bind="click: $root.save" value="Save" class="btn btn-primary">
				<input type="button" data-bind="click:  $root.deleteAll" value="DELETE ALL ENTRIES" class="btn btn-danger">
			</div>
		</div>
		<br>
		<div data-bind="foreach:  { data: myErrors, as: 'error' }">
			<div class="alert alert-error">
				<strong>Warning!</strong> <span data-bind="text: error"></span>
			</div>
		</div>
	</div>
</form>


<!-- ko if: meetups().length > 0 -->
<div class="dataBlock">
	<h2>Meetups</h2>
	<!-- ko foreach: meetups -->
	<div class="meetupContainer">
		Meetup: <span data-bind="text: name"></span> (<span data-bind="text: formattedDate"></span>)
		<br>
		<span data-bind="if: people().length > 0">Participants:</span>
		<ol data-bind="foreach: people">
			<li>
				<span data-bind="text: name"></span>
				<a data-bind="attr: { href: 'mailto:' + email(), title: 'email' }">(<span data-bind="text: email"></span>)</a>
				<a data-bind="attr: { href: 'https://twitter.com/' + twitter(), title: 'twitter account' }"><span data-bind="text: twitter"></span></a>
				<div>
					
				<span data-bind="visible: interests().length > 0">Interests:</span>
					<span data-bind="foreach: interests">
						&nbsp;<a data-bind="attr: { href: 'https://www.google.com/?q=' + name() + '#hl=en&tbo=d&output=search&sclient=psy-ab&q=' + name() + '&fp=1:', title: 'link' }"><span data-bind="text: name"></span></a>
					</span>	
				</div>
			</li>
		</ol>
		<span data-bind="if: people().length == 0">No one there? Really?</span>
	</div>
	<!-- /ko -->
</div>
<!-- /ko -->

</body>
</html>