<!DOCTYPE html>
<html>
<head>
<title>Testing with nodejs and knockout</title>

<script type='text/javascript' src='/javascripts/jquery-1.9.0.min.js'></script>
<script type='text/javascript' src='/javascripts/knockout-2.2.1.js'></script>
<script type='text/javascript' src="/javascripts/knockout.validation.min.js"></script>


<!--<script type='text/javascript' src="/bootstrap/js/bootstrap.min.js"></script>-->


<link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" href="/stylesheets/knockout.css" />

<script type='text/javascript'>
/*<![CDATA[*/

/* --------------------  WARNING  ------------------ */
/* MASTER FILE IS FULL.JS, AVOID EDITING OTHER FILES */
/* ------------------------------------------------- */

$(document).ready(function () {

	/* VARIABLES/CONSTANTS */
	var defaultEmail 				= 'get@one.com';
	var defaultTwitter 				= '@riesco';
	var defaultName 				= 'Rambo';
	var defaultMeetupName 			= 'Dynlang';
	defaultEmail = defaultTwitter = defaultName = defaultMeetupName = '';

	var reloadIntervalInSeconds 	= 5; // you may wan't to reduce this value for production environment
	var maxParticipants 			= 30;
	var maxInterests 				= 4;

	

	/* MODELS */
	// interest model
	var Interest = function(input) {
		var self = this;
		if (typeof(input) === 'undefined') { input = { name: 'javascript' }; }	
		self.name 				= ko.observable(input.name);
	}
	// person model
	var Person = function(input) {
		var self = this;
		if (typeof(input) === 'undefined') {
			input = { name: defaultName, twitter: defaultTwitter, email: defaultEmail }; 
		}	
		self.name 				= ko.observable(input.name).extend({ 
			required: true
			, minLength: 5
			, myRule: { 
				message: "The name MUST be Rocky !"
				, params: 'Rocky'
			}
		});
		self.twitter 			= ko.observable(input.twitter).extend({ 
			required: true
			, minLength: 5
			, pattern : {
				message: "Twitter accounts must start with an @"
				, params: /^@{1}.+/
			}
		});
		self.email 				= ko.observable(input.email).extend({ 
			required: true
			, minLength: 5
			, pattern : {
				message: "Please enter a valid e-mail address"
				, params: /^.+@{1}.+/
			}
		});
		self.interests 			= ko.observableArray([]);
		for (var i in input.interests) { self.interests.push( new Interest(input.interests[i]) ) }
		self.addInterest 		= function() { self.interests.push( new Interest() ) }
		self.removeInterest 	= function(item) { self.interests.remove(item) }

		self.lessThanLimit 		= ko.computed(function () {
			return (self.interests().length < maxInterests);
		}, self)
	}
	// meetup model
	var Meetup = function(input) {
		var self = this;
		if (typeof(input) === 'undefined') {
			input = { name: defaultMeetupName, date: Date.now }; 
		}
		self.name 				= ko.observable(input.name).extend({ 
			required: true
			, minLength: 3
		});
		self.date 				= ko.observable(input.date);
		self.people 			= ko.observableArray([]);
		for (var i in input.people) { self.people.push( new Person(input.people[i]) ) }
		self.addPerson 			= function() { self.people.push( new Person() ) }
		self.removePerson 		= function(item) { self.people.remove(item) }

		self.lessThanLimit 		= ko.computed(function () {
			return (self.people().length < maxParticipants);
		}, self)

		self.formattedDate 		= ko.computed(function() {
			var date =  new Date(self.date());
			// return date.toDateString('yyyy-MM-dd'); // @todo: fix this
			return date.toDateString();
		}, self)
	}


	var ViewModel = function() {
		var self = this;
		// meetups
		self.meetups = ko.observableArray([]);
		// holds the new meetup
		self.newMeetup = ko.observableArray( [new Meetup()] );

		self.myErrors = ko.observableArray ([]);

		/* load entries from db */
		/* maps the received data into our objects and then assigns the result to the model */
		self.load = function() {
			$.getJSON('/load', function(data) {
				var mappedMeetups = $.map(data, function(meetup) { return new Meetup(meetup) });
				self.meetups( mappedMeetups );
			}); 
		}

		/* delete all entries from db, then update the interface */
		self.deleteAll = function() {
			$.getJSON("/deleteAll", function(data) {
				self.load();
			}); 
		}

		/* save to db, remember to use ko.toJSON */
		self.save = function() {

			var result = ko.validation.group(self, {deep: true});
			self.myErrors(result() );
			model.errors.showAllMessages();

			if (self.isValid()) {
				$.ajax({
					type: 'POST',
					url: '/save',
					data: ko.toJSON( self.newMeetup() ),
					success: saveHandler,
					error: errorHandler,
					dataType: 'json',
					contentType: 'application/json' // don't forget this!!!!
				});		
			} else {
				// handle validation errors

				// find the first element with validationElement class and set focus on it
				$('input.validationElement:first').focus();
			}

		}

		/* handle */
		function saveHandler(msg) { 
			if (msg.result) {
				self.load();
			} else {
				console.log('ERROR: ' + msg.message);
				var errorMessages = [];
				if (typeof(msg.error) !== 'undefined') {
					for (error in msg.error) {
						errorMessage = { object: error, element: msg.error[error].path, error: msg.error[error].type };
						console.log(errorMessage);
						errorMessages.push(errorMessage);
					}
				} else { }
				console.log('Errors summary: ');
				console.log(errorMessages);	
			}
		}

		/* handle */
		function errorHandler(msg) {
			console.log('ERROR: ' + msg);
		}

		// set errors to be recurse on newMeetup and aware of changes
		// self.errors = ko.validation.group(self.newMeetup(), { deep: true, observable: true});

		// configuration (see https://github.com/ericmbarnard/Knockout-Validation/wiki/Configuration)
		ko.validation.init(
			{
				errorMessageClass 			: 'validationMessage'
				, errorElementClass 		: 'validationElement'
				, errorClass 				: null
				, insertMessages 			: false // enable this to insert text messages within the form 
				, decorateElement 			: true
				, parseInputAttributes 		: false
				, messagesOnModified 		: true
				, messageTemplate 			: null
				// , grouping 					: { deep: true, observable: true }
			}
		);
	}

	// new instance (only necessary to invoke the load method afterwards)
	var model = new ViewModel();
	// apply bindings
	ko.applyBindings(model); // This makes Knockout get to work
	// load and set an interterval to re-load
	model.load();
	setInterval(model.load, 1000 * reloadIntervalInSeconds);



	// custom validation rules
	ko.validation.rules['myRule'] = {

		validator: function (val, otherVal) {
				if (val == otherVal) {
					return true;
				} else {
					return false;
				}

			console.log(otherVal);
		},
		message: '{0} field is invalid'// + otherVal.name2
	};
	ko.validation.registerExtenders();



});
/*]]>*/
</script>
</head>
<body>

<div class="dataBlock">
	<form data-bind="submit: save" id="myForm" class="">
		<div data-bind="foreach: newMeetup" class="form-inline">
			Meetup whitelist<br>
			<input type="text" data-bind="value: name" class="" placeholder="Meetup name">
			<input type="button" data-bind="click: addPerson, enable: lessThanLimit" value="+participant" class="btn btn-success">
			
			<div data-bind="foreach: people">
				<div class="peopleContainer">
					<input type="text" data-bind="value: name" placeholder="name">
					<input type="text" data-bind="value: twitter" placeholder="@username">
					<div class="input-append">
						<input type="text" data-bind="value: email" placeholder="your@email.com"><input type="button" data-bind="click: $parent.removePerson" value="x" class="btn btn-danger">
					</div>

					<input type="button" data-bind="click: addInterest, enable: lessThanLimit" value="+interest" class="btn btn-success">
					<div data-bind="foreach: interests">
						<div class="input-append interestsContainer">
							<input type="text" data-bind="value: name">
							<input type="button" data-bind="click: $parent.removeInterest" value="x" class="btn btn-danger">
						</div>
					</div>	
				</div>
			</div>

			<div class="buttonsContainer" style="">
				<input type="submit" data-bind="click: $parent.save" value="Save" class="btn btn-primary">
				<input type="button" data-bind="click:  $root.deleteAll" value="DELETE ALL ENTRIES" class="btn btn-danger">
			</div>
		</div>
		<br>
		<div data-bind="foreach:  { data: myErrors, as: 'error' }">
			<div class="alert alert-error">
				<strong>Warning!</strong> <span data-bind="text: error"></span>
			</div>
		</div>
	</form>
</div>

<!-- ko if: meetups().length > 0 -->
<div data-bind="foreach: meetups" class="dataBlock">
	<div class="meetupContainer">
		Meetup: <span data-bind="text: name"></span> (<span data-bind="text: formattedDate"></span>)
		<br>
		<span data-bind="if: people().length > 0">Participants:</span>
		<ol data-bind="foreach: people">
			<li>
				<span data-bind="text: name"></span>
				<a data-bind="attr: { href: 'mailto:' + email(), title: 'email' }">(<span data-bind="text: email"></span>)</a>
				<a data-bind="attr: { href: 'https://twitter.com/' + twitter(), title: 'twitter account' }"><span data-bind="text: twitter"></span></a>
				<div>
					
				<span data-bind="visible: interests().length > 0">Interests:</span>
					<span data-bind="foreach: interests">
						&nbsp;<a data-bind="attr: { href: 'https://www.google.com/?q=' + name() + '#hl=en&tbo=d&output=search&sclient=psy-ab&q=' + name() + '&fp=1:', title: 'link' }"><span data-bind="text: name"></span></a>
					</span>	
				</div>
			</li>
		</ol>
		<span data-bind="if: people().length == 0">No one there? Really?</span>
	</div>
</div>
<!-- /ko -->

<!-- ko if: false -->
<div class="dataBlock">
	Bootstrap tests:
	<br>
	<div class="input-append">
	  <input class="span2" id="appendedInputButton" type="text">
	  <button class="btn" type="button">Go!</button>
	</div>

	<!-- Button to trigger modal -->
	<a href="#myModal" role="button" class="btn btn-primary" data-toggle="modal">Launch demo modal</a>
	 
	<!-- Modal -->
	<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	  <div class="modal-header">
	    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
	    <h3 id="myModalLabel">Modal header</h3>
	  </div>
	  <div class="modal-body">
	    <p>contenido del modal</p>
	  </div>
	  <div class="modal-footer">
	    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
	    <button class="btn btn-primary">Save changes</button>
	  </div>
	</div>
</div>
<!-- /ko -->

</body>
</html>